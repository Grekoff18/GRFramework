{
  "version": 3,
  "sources": ["../../config/index.ts", "../../src/core/util/error.ts", "../../src/core/tree/index.ts", "../../src/core/instance/index.ts", "../../src/core/builder/index.ts", "../../src/cli.ts"],
  "sourcesContent": ["export const inBrowser = typeof window !== \"undefined\";\n", "import { inBrowser } from \"../../../config\";\n\nexport default function error(msg: string): Error {\n  if (msg) {\n    console.error(msg);\n  }\n\n  if (inBrowser) {\n    throw new Error(msg);\n  } else {\n    process.exit(1);\n  }\n}\n", "import { Component } from \"../../../types/Component\";\nimport error from \"../util/error\";\nimport { ErrorMsg } from \"../../../enums/error\";\n\nexport default class GRTree {\n  // Virtual tree state\n  static treeStore: Array<Component>;\n\n  constructor(prevState: Array<Component> | undefined | []) {\n    // Set state value from prev state or set empty array\n    if (prevState) {\n      GRTree.treeStore = prevState;\n    } else {\n      GRTree.treeStore = [];\n    }\n  }\n\n  // Add new node for virtual tree\n  addNode(node: Component): void {\n    if (node && GRTree.treeStore) {\n      GRTree.treeStore.push(node);\n    } else {\n      error(ErrorMsg.NodeNotFound);\n    }\n  }\n}\n", "import { Component, ComponentOptions } from \"../../../types/Component\";\nimport GRTree from \"../tree\";\n\nexport default class GRInstance implements Component {\n  options: {options: ComponentOptions};\n\n  constructor(options: ComponentOptions) {\n    this.options = { options };\n    new GRTree(GRTree.treeStore).addNode(this.options);\n  }\n}\n", "import { Component } from \"../../../types/Component\";\nimport { Builder } from \"../../../types/Builder\";\nimport { inBrowser } from \"../../../config/index\";\nimport error from \"../util/error\";\nimport { ErrorMsg } from \"../../../enums/error\";\nexport default class GRBuilder implements Builder {\n  rootElement?: HTMLElement | Element | null | undefined = null;\n  selector?: string | null;\n  component?: Component | null;\n\n  constructor(selector: string, component: Component) {\n    this.selector = selector;\n    this.component = component;\n    GRBuilder.getMainSelector(this.selector, this.component);\n  }\n\n  // Return root selector\n  static getMainSelector(\n    selector: string,\n    component: Component\n  ): HTMLElement | Element | null {\n    console.log(\"getMainSelector\", { selector, component });\n    if (selector && component && inBrowser) {\n      const rootSelector = document.querySelector(selector);\n      if (!rootSelector) error(ErrorMsg.SelectorNotFound);\n      return rootSelector;\n    }\n    // TODO: Uncomment it when publish package\n    // else {\n    //   error(ErrorMsg.CallSelectorOutsideBrowser)\n    //   return null;\n    // }\n    return null;\n  }\n}\n", "#!/usr/bin/env node\nimport { GRInstance, GRTree, GRBuilder } from \"./index\";\n\nnew GRInstance({\n  propData: {\n    parent: \"1\",\n  },\n  children: [],\n  tag: \"p\",\n});\nconst component = new GRInstance({\n  propData: {\n    parent: \"2\",\n  },\n  children: [],\n  tag: \"div\",\n});\n\nnew GRBuilder(\".app\", component);\n\nconsole.log(\"grtree\", GRTree.treeStore);\n"],
  "mappings": ";AAAO,GAAM,GAAY,MAAO,SAAW,YCE5B,WAAe,EAAoB,CAKhD,GAJI,GACF,QAAQ,MAAM,CAAG,EAGf,EACF,KAAM,IAAI,OAAM,CAAG,EAEnB,QAAQ,KAAK,CAAC,CAElB,CCRA,WAA4B,CAI1B,YAAY,EAA8C,CAExD,AAAI,EACF,EAAO,UAAY,EAEnB,EAAO,UAAY,CAAC,CAExB,CAGA,QAAQ,EAAuB,CAC7B,AAAI,GAAQ,EAAO,UACjB,EAAO,UAAU,KAAK,CAAI,EAE1B,EAAM,sBAAqB,CAE/B,CACF,ECtBA,WAAqD,CAGnD,YAAY,EAA2B,CACrC,KAAK,QAAU,CAAE,SAAQ,EACzB,GAAI,GAAO,EAAO,SAAS,EAAE,QAAQ,KAAK,OAAO,CACnD,CACF,ECLA,WAAkD,CAKhD,YAAY,EAAkB,EAAsB,CAJpD,iBAAyD,KAKvD,KAAK,SAAW,EAChB,KAAK,UAAY,EACjB,EAAU,gBAAgB,KAAK,SAAU,KAAK,SAAS,CACzD,OAGO,iBACL,EACA,EAC8B,CAE9B,GADA,QAAQ,IAAI,kBAAmB,CAAE,WAAU,WAAU,CAAC,EAClD,GAAY,GAAa,EAAW,CACtC,GAAM,GAAe,SAAS,cAAc,CAAQ,EACpD,MAAK,IAAc,EAAM,oCAAyB,EAC3C,CACT,CAMA,MAAO,KACT,CACF,EC/BA,GAAI,GAAW,CACb,SAAU,CACR,OAAQ,GACV,EACA,SAAU,CAAC,EACX,IAAK,GACP,CAAC,EACD,GAAM,GAAY,GAAI,GAAW,CAC/B,SAAU,CACR,OAAQ,GACV,EACA,SAAU,CAAC,EACX,IAAK,KACP,CAAC,EAED,GAAI,GAAU,OAAQ,CAAS,EAE/B,QAAQ,IAAI,SAAU,EAAO,SAAS",
  "names": []
}
